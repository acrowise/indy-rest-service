name: Node.js CI

on: [push]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [10.x]

    steps:      
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    #- run: npm run build --if-present
    #- run: npm test
      env:
        CI: true
        TF_LOG: DEBUG
        GOOGLE_APPLICATION_CREDENTIALS: "./client-secret.json"
    - name: Initialize Google Cloud SDK
      uses: zxyle/publish-gae-action@master
      with:
        service_account_email: ${{ secrets.GCP_SA_EMAIL }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.PROJECT_ID }}
        # An optional variables parameter can be used
        #gae_variables: ${{ secrets.GAE_VARIABLES }}
    - run: gcloud auth activate-service-account ${{ secrets.GCP_SA_EMAIL }} --key-file=client-secret.json
    - run: env
    - name: Running terraform
      uses: marocchino/setup-terraform@v1.0.1
      with:
        # The terraform version to download (if necessary) and use. Example: 0.12.13
        version: 0.12.21
    - run: terraform init -backend-config=./terraform/envs/dev/backend.tf ./terraform
    - run: terraform plan -var-file=./terraform/envs/dev/dev.tfvars -detailed-exitcode ./terraform
    - name: Publish app to Google App Engine
      run: |
        # This client-secret.json is converted by GCP_SA_KEY.        
        gcloud config set project ${{ secrets.PROJECT_ID }}
        gcloud -q app deploy app.yaml --promote

        # Suppose you need a cron task.
        #gcloud -q app deploy cron.yaml    
